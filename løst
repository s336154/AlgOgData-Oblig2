/////////// DobbeltLenketListe ////////////////////////////////////
import javafx.scene.Node;

import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Objects;

import static java.util.Objects.requireNonNull;

public class DobbeltLenketListe<T> implements Liste<T>
{



    public static void main(String[] args) {

       String[] s = {"Ole", null, "Per", "Kari", null};
        Liste<String> liste = new DobbeltLenketListe<>();
        System.out.println(liste.antall() + " " + liste.tom());

      /*   DobbeltLenketListe<Integer> liste = new DobbeltLenketListe<>();
        System.out.println(liste.toString() + " " + liste.omvendtString());
        for (int i = 1; i <= 3; i++) {
            liste.leggInn(i);
            System.out.println(liste.toString() + " " + liste.omvendtString()); */

    /*    String[] s1 = {}, s2 = {"A"}, s3 = {null,"A",null,"B",null};
        DobbeltLenketListe<String> l1 = new DobbeltLenketListe<>(s1);
        DobbeltLenketListe<String> l2 = new DobbeltLenketListe<>(s2);
        DobbeltLenketListe<String> l3 = new DobbeltLenketListe<>(s3);

        System.out.println(l1.toString() + " " + l2.toString() + " " + l3.toString()); */
    /*    System.out.println(l1.toString() + " " + l2.toString()
                + " " + l3.toString() + " " + l1.omvendtString() + " "
                + l2.omvendtString() + " " + l3.omvendtString()); */
// Utskrift: [] [A] [A, B] [] [A] [B, A





    }
private int antall;
    @Override
    public int antall() // oppgave 1
    {
        return antall;
    }

    @Override
    public boolean tom() // oppgave 1
    {
        return antall == 0; // listen er tom hvis antall er 0;
    }

    @Override
    public boolean fjern(T verdi)
    {
        Iterator<T> i = iterator();
        if (verdi == null) // fjerner en eventuell null-verdi
        {
            while (i.hasNext()) // flere igjen
            {
                if (i.next() == null) // sammenligner
                {
                    i.remove(); // fjerner
                    return true; // vellykket fjerning
                }
            }
        }
        else // t er ikke lik null
        {
            while (i.hasNext()) // flere igjen
            {
                if (verdi.equals(i.next())) // sammneligner
                {
                    i.remove(); // fjerner
                    return true; // vellykket fjerning
                }
            }
        }
        return false;
    }






  /*  @SuppressWarnings("unchecked")
    public DobbeltLenketListe(int length) {
        a = (T[])new Object[length]; // oppretter tabellen
        antall = 0; // foreløpig ingen verdier
    } */

    // konstruktør
    public DobbeltLenketListe(T [] a) //oppgave 1
    {
        Objects.requireNonNull(a);

        //   this(a.length); // kaller den andre konstruktøren
        for (T verdi : a)
        {
            if (verdi != null) a[antall++] = verdi;
        }


    // konstruktør
  /*  public DobbeltLenketListe(T [] a) //oppgave 1
    {
        Objects.requireNonNull(a);

        //   this(a.length); // kaller den andre konstruktøren
        for (T verdi : a)
        {
            if (verdi != null) a[antall++] = verdi;
        } }
        int indeks = 0;
        while (indeks < a.length) {
            if (hode != null) {
                if (a[indeks] != null) {
                    hale.neste = new Node<>(a[indeks], hale, null);
                    hale = hale.neste;
                    antall++;
                }
            } else {
                if (a[indeks] != null) {
                    hode = new Node<>(a[indeks], null, hale);
                    hale = hode;
                    antall++;
                }


            }
            indeks++;
        }

    }

    /*

    @Override
    public String toString() // oppgave 2
    {
        if(tom()){
            return "[]";
        }
        Node<T> temp = hode;

        StringBuilder r = new StringBuilder("[");




        while (temp != hale){

                r.append(temp.verdi+ "," );
                temp = temp.neste;



        }

        r.append(temp.verdi+ "]");

        return r.toString();






     //   return null;
    } */


/*
    public String omvendtString()
    {
        Node q = new Node(fo);

        if ( (hode == null) && (hale == null) ) {
            hode = q;
            hale = q;
            antall += 1;
        }
        else {
            Node p = hale;
            hale = q;
            q.forrige = p;
            p.neste = q;
            antall += 1;
        }

        return antall;
    } */



    static class  Node<T>  {
        // instansvariabler
        private T verdi;
        private Node<T> forrige, neste;

        private Node(T verdi, Node<T> forrige, Node<T> neste)  // konstruktør
        {
            this.verdi = verdi;
            this.forrige = forrige;
            this.neste = neste;
        }

    }



   private static final class Node<T>   // en indre nodeklasse
  {
    // instansvariabler
    private T verdi;
    private Node<T> forrige, neste;

    private Node(T verdi, Node<T> forrige, Node<T> neste)  // konstruktør
    {
      this.verdi = verdi;
      this.forrige = forrige;
      this.neste = neste;
    }

    protected Node(T verdi)  // konstruktør
    {
      this(verdi, null, null);
    }

  } // Node



    // instansvariabler
    private Node<T> hode;          // peker til den første i listen
    private Node<T> hale;          // peker til den siste i listen
    private int antall;            // antall noder i listen
    private int endringer;   // antall endringer i listen
    private T verdi;
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////



    // hjelpemetode
    private Node<T> finnNode(int indeks)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    // konstruktør
    public DobbeltLenketListe()
    {
        hode = hale = null;
        antall = 0;
        endringer = 0;
    }



    // subliste
    public Liste<T> subliste(int fra, int til)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }


    @Override
    public boolean leggInn(T verdi)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public void leggInn(int indeks, T verdi)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public boolean inneholder(T verdi)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public T hent(int indeks)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public int indeksTil(T verdi)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public T oppdater(int indeks, T nyverdi)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }



    @Override
    public T fjern(int indeks)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public void nullstill()
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }



    public static <T> void sorter(Liste<T> liste, Comparator<? super T> c)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    @Override
    public Iterator<T> iterator()
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    public Iterator<T> iterator(int indeks)
    {
        throw new UnsupportedOperationException("Ikke laget ennå!");
    }

    private class DobbeltLenketListeIterator implements Iterator<T>
    {
        private Node<T> denne;
        private boolean fjernOK;
        private int iteratorendringer;

        private DobbeltLenketListeIterator()
        {
            denne = hode;     // denne starter på den første i listen
            fjernOK = false;  // blir sann når next() kalles
            iteratorendringer = endringer;  // teller endringer
        }

        private DobbeltLenketListeIterator(int indeks)
        {
            throw new UnsupportedOperationException("Ikke laget ennå!");
        }

        @Override
        public boolean hasNext()
        {
            return denne != null;  // denne koden skal ikke endres!
        }

        @Override
        public T next()
        {
            throw new UnsupportedOperationException("Ikke laget ennå!");
        }

        @Override
        public void remove()
        {
            throw new UnsupportedOperationException("Ikke laget ennå!");
        }

    } // DobbeltLenketListeIterator

} // DobbeltLenketListe
